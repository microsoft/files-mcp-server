import { Server } from "@modelcontextprotocol/sdk/server/index.js";
import {
    CallToolRequestSchema,
    ListResourcesRequestSchema,
    ListResourceTemplatesRequestSchema,
    ListToolsRequestSchema,
    Notification,
    ReadResourceRequestSchema,
    Request,
} from "@modelcontextprotocol/sdk/types.js";
import { callToolHandler, getToolsHandler } from "./tools.js";
import { MCPContext } from "./method-context.js";
import { getResourcesHandler, readResourceHandler } from "./resources.js";
import { getResourceTemplatesHandler } from "./resourceTemplates.js";
import { ensureSession } from "./session.js";
import { RequestHandlerExtra } from "@modelcontextprotocol/sdk/shared/protocol.js";
import { getMethodContext } from "./method-context.js";

export async function setupMCPServer(): Promise<Server> {

    // setup the server
    const server = new Server(
        {
            name: "Files-MCP-Server",
            version: "0.0.1",
        },
        {
            capabilities: {
                tools: {
                    listChanged: true,
                },
                resources: {
                    listChanged: true,
                },
            },
            instructions: `This server represents a local testing experience for working with Microsoft OneDrive and SharePoint resources. It exposes a set of contextual tools and resources aligned 
                           to each of the entities - sites, libraries, lists, files, list items, and folders. Each of these entities can be addressed as a resource with a specific protocol and key which
                           forms a tuple identifying that entity. The key is generated by this server, and is not equivelent to the id value in the metadata.
                           
                           At any time you can change context using the set_context tool - which accepts most SharePoint and OneDrive urls and resource uris created by this server. Setting context
                           will expose a new set of tools/resources available in that context. If no context is set you can list the available sites and drives.`,
        }
    );

    // this function allows us to normalize the paramters for handlers, injecting anything we need centrally
    function callHandler<T extends (this: MCPContext) => Promise<any>>(handler: T) {

        return async (request: Request, extra: RequestHandlerExtra<Request, Notification>): Promise<ReturnType<T>> => {

            // create a new context "this" instance per-request. This allows new props/methods to be attached to the context without affecting global
            const context = await getMethodContext();
            const session = await ensureSession(extra.sessionId);

            context.params = {
                server,
                request,
                extra,
                session,
                token: extra?.authInfo?.token || "",
            };

            return handler.call(context);
        }
    }

    // this allows us to list tools
    server.setRequestHandler(ListToolsRequestSchema, callHandler(<any>getToolsHandler));

    // this handles individual tool requests, mapping them to the appropriate tool
    server.setRequestHandler(CallToolRequestSchema, callHandler(<any>callToolHandler));

    // this allows us to list resources
    server.setRequestHandler(ListResourcesRequestSchema, callHandler(<any>getResourcesHandler));

    // and read a resource
    server.setRequestHandler(ReadResourceRequestSchema, callHandler(<any>readResourceHandler));

    // list all the resource templates
    server.setRequestHandler(ListResourceTemplatesRequestSchema, callHandler(<any>getResourceTemplatesHandler));

    return server;
}
